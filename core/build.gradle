apply plugin: 'signing'
apply plugin: 'maven-publish'

group = "com.replash"
archivesBaseName = "replash-core"

dependencies {
    compile "jline:jline:2.12"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "commons-io:commons-io:2.4"
    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-core:1.9.5"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}

configurations {
    pom
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    if(pomFile.exists()) {
        pom pomFile
    }
}

task signJars (type : Sign, dependsOn: [jar, javadocJar, sourcesJar]) {
    sign configurations.archives
}

task signPom(type: Sign) {
    sign configurations.pom
}

if (project.ext.pomFile.exists()) {
    task preparePublication (dependsOn : [signJars, signPom])
}
else {
    task preparePublication (dependsOn : signJars)
}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar,     classifier: null,      extension: 'jar.asc']
    ]
}

def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect{it}[0]
}

publishing {
    publications {
        gpgJars(MavenPublication) {
            getSignatureFiles().each {signature ->
                artifact (signature.archive) {
                    classifier = signature.classifier
                    extension  = signature.extension
                }
            }
        }
        if (project.ext.pomFile.exists()) {
            gpgPom(MavenPublication) {
                artifact (getPomSignature()) {
                    classifier = null
                    extension  = 'pom.asc'
                }
            }
        }
        jar(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'REPLash'
                    description 'A lightweight and extensible command-line REPL for Java'
                    url projectUrl
                    scm {
                        url scmUrl
                        connection connectionUrl
                        developerConnection developerConnectionUrl
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'spaceshaker'
                            name 'Curt Beattie'
                            email 'spaceshaker.geo@yahoo.com'
                        }
                    }
                }
            }
        }
    }
    repositories {
        if (project.ext.pomFile.exists()) {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
        else {
            maven {
                url "file:/${project.projectDir}/artifacts"
            }
        }
    }
}